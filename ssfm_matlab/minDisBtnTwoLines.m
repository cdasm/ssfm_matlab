function [ dis,pnt ] = minDisBtnTwoLines( p1,p2,p3,u1,u2,u3,q1,q2,q3,v1,v2,v3 )
%Return the minimum distance between two lines in 3D space
%   two lines are in a format of p+su=0 q+tv=0

dis=(p1*u2*v3 - p1*u3*v2 - p2*u1*v3 + p2*u3*v1 + p3*u1*v2 - p3*u2*v1 - q1*u2*v3 + q1*u3*v2 + q2*u1*v3 - q2*u3*v1 - q3*u1*v2 + q3*u2*v1)^2/(u1^2*v2^2 + u1^2*v3^2 - 2*u1*u2*v1*v2 - 2*u1*u3*v1*v3 + u2^2*v1^2 + u2^2*v3^2 - 2*u2*u3*v2*v3 + u3^2*v1^2 + u3^2*v2^2);
%dis=(p1*u2*v3 - p1*u3*v2 - p2*u1*v3 + p2*u3*v1 + p3*u1*v2 - p3*u2*v1 - q1*u2*v3 + q1*u3*v2 + q2*u1*v3 - q2*u3*v1 - q3*u1*v2 + q3*u2*v1)^2/(u1^2*v2^2 + u1^2*v3^2 - 2*u1*u2*v1*v2 - 2*u1*u3*v1*v3 + u2^2*v1^2 + u2^2*v3^2 - 2*u2*u3*v2*v3 + u3^2*v1^2 + u3^2*v2^2)
 %    (p1*u2*v3 - p1*u3*v2 - p2*u1*v3 + p2*u3*v1 + p3*u1*v2 - p3*u2*v1 - q1*u2*v3 + q1*u3*v2 + q2*u1*v3 - q2*u3*v1 - q3*u1*v2 + q3*u2*v1)^2/(u1^2*v2^2 + u1^2*v3^2 - 2*u1*u2*v1*v2 - 2*u1*u3*v1*v3 + u2^2*v1^2 + u2^2*v3^2 - 2*u2*u3*v2*v3 + u3^2*v1^2 + u3^2*v2^2)
pnt=[ ((2*p1*u2^2 + 2*p1*u3^2 - 2*p2*u1*u2 - 2*p3*u1*u3 + 2*q2*u1*u2 + 2*q3*u1*u3)*v1^2 + (2*p2*u1^2*v2 + p2*u3^2*v2 + 2*p3*u1^2*v3 + p3*u2^2*v3 - 2*q2*u1^2*v2 - q2*u3^2*v2 - 2*q3*u1^2*v3 - q3*u2^2*v3 - 2*p1*u1*u2*v2 - 2*p1*u1*u3*v3 - p2*u2*u3*v3 - p3*u2*u3*v2 - 2*q1*u1*u2*v2 - 2*q1*u1*u3*v3 + q2*u2*u3*v3 + q3*u2*u3*v2)*v1 + p1*u2^2*v3^2 + p1*u3^2*v2^2 + 2*q1*u1^2*v2^2 + 2*q1*u1^2*v3^2 + q1*u2^2*v3^2 + q1*u3^2*v2^2 - p2*u1*u2*v3^2 - p3*u1*u3*v2^2 + q2*u1*u2*v3^2 + q3*u1*u3*v2^2 - 2*p1*u2*u3*v2*v3 + p2*u1*u3*v2*v3 + p3*u1*u2*v2*v3 - 2*q1*u2*u3*v2*v3 - q2*u1*u3*v2*v3 - q3*u1*u2*v2*v3)/((2*u2^2 + 2*u3^2)*v1^2 + (- 4*u1*u2*v2 - 4*u1*u3*v3)*v1 + 2*u1^2*v2^2 + 2*u1^2*v3^2 + 2*u2^2*v3^2 - 4*u2*u3*v2*v3 + 2*u3^2*v2^2),...
    ((p2*u3^2 + 2*q2*u2^2 + q2*u3^2 - p3*u2*u3 + q3*u2*u3)*v1^2 + (2*p1*u2^2*v2 + p1*u3^2*v2 - 2*q1*u2^2*v2 - q1*u3^2*v2 - 2*p2*u1*u2*v2 + p1*u2*u3*v3 - 2*p2*u1*u3*v3 + p3*u1*u2*v3 - p3*u1*u3*v2 - 2*q2*u1*u2*v2 - q1*u2*u3*v3 - 2*q2*u1*u3*v3 - q3*u1*u2*v3 + q3*u1*u3*v2)*v1 + 2*p2*u1^2*v2^2 + p2*u1^2*v3^2 + 2*p2*u3^2*v2^2 + q2*u1^2*v3^2 + 2*q2*u2^2*v3^2 - 2*p1*u1*u2*v2^2 - p1*u1*u2*v3^2 - 2*p3*u2*u3*v2^2 + 2*q1*u1*u2*v2^2 + q1*u1*u2*v3^2 + p3*u1^2*v2*v3 + 2*p3*u2^2*v2*v3 + 2*q3*u2*u3*v2^2 - q3*u1^2*v2*v3 - 2*q3*u2^2*v2*v3 - p1*u1*u3*v2*v3 - 2*p2*u2*u3*v2*v3 + q1*u1*u3*v2*v3 - 2*q2*u2*u3*v2*v3)/((2*u2^2 + 2*u3^2)*v1^2 + (- 4*u1*u2*v2 - 4*u1*u3*v3)*v1 + 2*u1^2*v2^2 + 2*u1^2*v3^2 + 2*u2^2*v3^2 - 4*u2*u3*v2*v3 + 2*u3^2*v2^2),...
    ((p3*u2^2 + q3*u2^2 + 2*q3*u3^2 - p2*u2*u3 + q2*u2*u3)*v1^2 + (p1*u2^2*v3 + 2*p1*u3^2*v3 - q1*u2^2*v3 - 2*q1*u3^2*v3 + p1*u2*u3*v2 - p2*u1*u2*v3 + p2*u1*u3*v2 - 2*p3*u1*u2*v2 - 2*p3*u1*u3*v3 - q1*u2*u3*v2 + q2*u1*u2*v3 - q2*u1*u3*v2 - 2*q3*u1*u2*v2 - 2*q3*u1*u3*v3)*v1 + p3*u1^2*v2^2 + 2*p3*u1^2*v3^2 + 2*p3*u2^2*v3^2 + q3*u1^2*v2^2 + 2*q3*u3^2*v2^2 - p1*u1*u3*v2^2 - 2*p1*u1*u3*v3^2 - 2*p2*u2*u3*v3^2 + q1*u1*u3*v2^2 + p2*u1^2*v2*v3 + 2*q1*u1*u3*v3^2 + 2*p2*u3^2*v2*v3 + 2*q2*u2*u3*v3^2 - q2*u1^2*v2*v3 - 2*q2*u3^2*v2*v3 - p1*u1*u2*v2*v3 - 2*p3*u2*u3*v2*v3 + q1*u1*u2*v2*v3 - 2*q3*u2*u3*v2*v3)/((2*u2^2 + 2*u3^2)*v1^2 + (- 4*u1*u2*v2 - 4*u1*u3*v3)*v1 + 2*u1^2*v2^2 + 2*u1^2*v3^2 + 2*u2^2*v3^2 - 4*u2*u3*v2*v3 + 2*u3^2*v2^2)];
  
end

